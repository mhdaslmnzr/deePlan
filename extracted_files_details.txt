File: .\index.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>deePlan</title>
    <link rel="shortcut icon" href="./images/images.jpg" type="image/x-icon">
    <link rel="stylesheet" href="css/styles.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2/dist/tailwind.min.css" rel="stylesheet" type="text/css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
</head>
<body class="antialiased bg-slate-200 mx-2">
    <div class="max-w-lg mx-auto my-10 p-8">
        <div class="flex flex-row justify-between items-center">
            <h1 class="text-3xl font-medium underline decoration-pink-500">deeplan</h1>
            <button id="addTaskButton" class="bg-blue-700 text-white px-4 py-2 rounded-xl">+</button>
        </div>
        <div class="text-zinc-500 my-2" id="currentDateTime">
        </div>
        <div id="tasks" class="my-5">
            <p id="noTasksMessage" class="text-slate-500"></p>
        </div>
    </div>

    <div id="taskModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
        <div class="bg-white p-8 rounded-xl shadow shadow-slate-300 w-full max-w-md">
            <h2 class="text-xl font-medium mb-4">Add Task</h2>
            <form id="taskForm">
                <div class="mb-4">
                    <label for="taskName" class="block text-sm font-medium text-slate-700">Task Name</label>
                    <input type="text" id="taskName" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 outline-none">
                    <p id="errorMessage" class="text-red-500 text-sm mt-1 hidden">Task name is required</p>
                </div>
                <div class="mb-4">
                    <label for="taskDate" class="block text-sm font-medium text-slate-700">Due Date</label>
                    <input type="date" id="taskDate" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm focus:ring focus:ring-blue-200 outline-none">
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancelButton" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Task</button>
                </div>
            </form>
        </div>
    </div>
    <script type="module" src="js/scripts.js"></script>
</body>
</html>


File: .\css\styles.css
------------------------------------------------------------
* {
    font-family: "Poppins", sans-serif;
}

#mallu {
    margin-top: 15px;
    font-family: "Noto Sans Malayalam", sans-serif;
    font-optical-sizing: auto;
}

.overdue {
    background-color: #ff0026; /* Red */
}

.due-today {
    background-color: #3b82f6; /* Blue */
}

.due-soon {
    background-color: #10b981; /* Green */
}

.due-later {
    background-color: #f3f4f6; /* Off-white */
}

.task-completed {
    background-color: #d1d5db;
    text-decoration: line-through;
}

.task-container {
    cursor: pointer;
}

.delete-icon,
.complete-icon {
    cursor: pointer;
}

.hidden {
    display: none;
}

.task-completed {
    background-color: #d1d5db;
    text-decoration: line-through;
}

.task-list-gap {
    gap: 15px;
}

.task-list-item {
    width: calc(100% - 20px);
}

@media (min-width: 640px) {
    .task-list-item {
        width: calc(100% - 30px); /* Adjusted width for desktop view */
    }
}

#errorMessage {
    display: block;
}

File: .\js\scripts.js
------------------------------------------------------------
// Import the functions you need from the SDKs you need
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-app.js";
import { getDatabase, ref, set, get, update, remove, push } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-database.js";
import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/10.12.3/firebase-auth.js";

// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
    apiKey: "AIzaSyAX8R_kTUe5EnrTDfzP5PsaqaIrxwNzpXk",
    authDomain: "deeplan-41bda.firebaseapp.com",
    databaseURL: "https://deeplan-41bda-default-rtdb.firebaseio.com",
    projectId: "deeplan-41bda",
    storageBucket: "deeplan-41bda.appspot.com",
    messagingSenderId: "690954571128",
    appId: "1:690954571128:web:3880e1b5cf0758624c0c8d",
    measurementId: "G-31DJ0LL3MT"
  };

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);  // Initialize Auth
const database = getDatabase(app);  // Initialize Realtime Database
const tasksRef = ref(database, 'tasks');  // Reference to 'tasks' in the database

// Sign in anonymously
signInAnonymously(auth)
    .catch((error) => {
        console.error('Error during anonymous sign-in:', error);
    });

function updateDateTime() {
    const now = new Date();
    const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: true
    };
    const dateTimeString = now.toLocaleString('en-US', options);
    document.getElementById('currentDateTime').textContent = dateTimeString;
}

setInterval(updateDateTime, 1000);
updateDateTime(); // Initial call


document.addEventListener('DOMContentLoaded', function() {
    const tasks = [];
    const taskContainer = document.getElementById('tasks');
    const addTaskButton = document.getElementById('addTaskButton');
    const taskModal = document.getElementById('taskModal');
    const cancelButton = document.getElementById('cancelButton');
    const taskForm = document.getElementById('taskForm');
    const errorMessage = document.getElementById('errorMessage');
    const noTasksMessage = document.getElementById('noTasksMessage');

    // Show the task modal when the "+" button is clicked
    addTaskButton.addEventListener('click', () => {
        taskModal.classList.remove('hidden');
        errorMessage.classList.add('hidden');  // Reset the error message
    });

    // Close the task modal when the "Cancel" button is clicked
    cancelButton.addEventListener('click', () => {
        taskModal.classList.add('hidden');
        errorMessage.classList.add('hidden');  // Reset the error message
    });
    
    taskForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const taskName = document.getElementById('taskName').value.trim();
        const taskDate = document.getElementById('taskDate').value;
    
        if (!taskName) {
            errorMessage.classList.remove('hidden');
            return;
        }
    
        errorMessage.classList.add('hidden');
        const newTaskRef = push(tasksRef);
        set(newTaskRef, { name: taskName, date: taskDate, completed: false })
            .then(() => {
                console.log('Task added successfully');
                taskForm.reset();
                taskModal.classList.add('hidden');
                fetchTasks();
            })
            .catch(error => {
                console.error('Error adding task: ', error);
            });
    });

    // Fetch tasks from Firebase and render them
    function fetchTasks() {
        get(tasksRef)
            .then(snapshot => {
                tasks.length = 0;  // Clear existing tasks
                snapshot.forEach(childSnapshot => {
                    tasks.push({ id: childSnapshot.key, ...childSnapshot.val() });
                });
                console.log('Fetched tasks:', tasks);  // Log tasks
                renderTasks();  // Render tasks
            })
            .catch(error => {
                console.error('Error fetching tasks: ', error);  // Log errors
            });
    }

    // Render tasks on the page
    function renderTasks() {
        taskContainer.innerHTML = '';
        if (tasks.length === 0) {
            noTasksMessage.classList.remove('hidden');
        } else {
            noTasksMessage.classList.add('hidden');
            tasks.sort((a, b) => {
                if (a.completed !== b.completed) {
                    return a.completed - b.completed;  // Incomplete tasks first
                }
                return new Date(b.date) - new Date(a.date);  // Recently added tasks first
            }).forEach(task => {
                const taskElement = document.createElement('div');
                const currentDate = new Date();
                currentDate.setHours(0, 0, 0, 0); // Set to start of day
                const taskDate = task.date ? new Date(task.date) : null;
                if (taskDate) taskDate.setHours(0, 0, 0, 0); // Set to start of day
                let daysLeft = taskDate ? Math.floor((taskDate - currentDate) / (1000 * 60 * 60 * 24)) : null;
                let dueClass = '';
                let dueText = '';
    
                if (task.completed) {
                    dueClass = 'task-completed';
                    dueText = 'Completed';
                } else if (!taskDate) {
                    dueClass = 'due-later';
                    dueText = 'No due date';
                } else if (daysLeft < 0) {
                    dueClass = 'overdue';
                    dueText = 'Overdue';
                } else if (daysLeft === 0) {
                    dueClass = 'due-today';
                    dueText = 'Due today';
                } else if (daysLeft <= 2) {
                    dueClass = 'due-soon';
                    dueText = `Due in ${daysLeft} day${daysLeft > 1 ? 's' : ''}`;
                } else {
                    dueClass = 'due-later';
                    dueText = `Due in ${daysLeft} days`;
                }
    
                taskElement.className = `flex justify-between items-center border-b border-slate-200 py-3 px-2 border-l-4 ${dueClass} task-list-item task-list-gap m-1 rounded-md`;
                taskElement.innerHTML = `
                    <div class="inline-flex items-center space-x-2">
                        <input type="checkbox" class="form-checkbox h-5 w-5 text-blue-600 complete-icon" ${task.completed ? 'checked' : ''}>
                        <div>
                            <p class="text-lg">${task.name}</p>
                            <p class="text-sm">${dueText}</p>
                            <p class="text-sm">Deadline: ${task.date}</p>
                        </div>
                    </div>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-red-500 hover:text-red-700 hover:cursor-pointer delete-icon">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                    </svg>
                `;
    

                // Mark task as completed
                taskElement.querySelector('.complete-icon').addEventListener('click', () => {
                    update(ref(database, `tasks/${task.id}`), { completed: !task.completed })
                        .then(() => {
                            fetchTasks();  // Re-fetch tasks after updating
                        })
                        .catch(error => {
                            console.error('Error updating task: ', error);
                        });
                });

                // Delete task
                taskElement.querySelector('.delete-icon').addEventListener('click', () => {
                    remove(ref(database, `tasks/${task.id}`))
                        .then(() => {
                            fetchTasks();  // Re-fetch tasks after deleting
                        })
                        .catch(error => {
                            console.error('Error deleting task: ', error);
                        });
                });

                taskContainer.appendChild(taskElement);
            });
        }
    }

    fetchTasks();  // Initial fetch of tasks
});
function deleteOldCompletedTasks() {
    const tenDaysAgo = new Date();
    tenDaysAgo.setDate(tenDaysAgo.getDate() - 10);

    get(tasksRef).then(snapshot => {
        snapshot.forEach(childSnapshot => {
            const task = childSnapshot.val();
            if (task.completed && new Date(task.completedDate) < tenDaysAgo) {
                remove(ref(database, `tasks/${childSnapshot.key}`));
            }
        });
    });
}

// Call this function every day
setInterval(deleteOldCompletedTasks, 24 * 60 * 60 * 1000);

