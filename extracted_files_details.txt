File: .\index.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>deePlan</title>
    <link rel="stylesheet" href="css/styles.css">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2/dist/tailwind.min.css" rel="stylesheet" type="text/css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Malayalam:wght@100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
</head>
<body class="antialiased bg-slate-200 text-slate-700 mx-2">
    <div class="max-w-lg mx-auto my-10 bg-white p-8 rounded-xl shadow shadow-slate-300">
        <div class="flex flex-row justify-between items-center">
            <h1 class="text-3xl font-medium">deePlan</h1>
            <button id="addTaskButton" class="bg-blue-500 text-white px-4 py-2 rounded">+</button>
        </div>
        <p id="mallu" class="text-slate-500"> <b>‡¥®‡¥ø‡¥∏‡µç‡¥∏‡¥æ‡¥∞‡¥Ç,</b>  ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÜ ‡¥ï‡µä‡¥£‡µç‡¥ü‡µç ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥Ç, ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÜ ‡¥ï‡µä‡¥£‡µç‡¥ü‡µá ‡¥™‡¥±‡µç‡¥±‡µÇ! ü•∞</p>
        <div id="tasks" class="my-5">
            <p id="noTasksMessage" class="text-slate-500">Click + to add tasks</p>
        </div>
    </div>

    <div id="taskModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
        <div class="bg-white p-8 rounded-xl shadow shadow-slate-300 w-full max-w-md">
            <h2 class="text-xl font-medium mb-4">Add Task</h2>
            <form id="taskForm">
                <div class="mb-4">
                    <label for="taskName" class="block text-sm font-medium text-slate-700">Task Name</label>
                    <input type="text" id="taskName" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm focus:ring focus:ring-blue-200">
                    <p id="errorMessage" class="text-red-500 text-sm mt-1 hidden">Task name is required</p>
                </div>
                <div class="mb-4">
                    <label for="taskDate" class="block text-sm font-medium text-slate-700">Due Date</label>
                    <input type="date" id="taskDate" class="mt-1 block w-full border border-slate-300 rounded-md shadow-sm focus:ring focus:ring-blue-200">
                </div>
                <div class="flex justify-end space-x-4">
                    <button type="button" id="cancelButton" class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">Add Task</button>
                </div>
            </form>
        </div>
    </div>
    <script src="js/scripts.js"></script>
</body>
</html>


File: .\css\styles.css
------------------------------------------------------------
* {
    font-family: "Poppins", sans-serif;
}

#mallu {
    margin-top: 15px;
    font-family: "Noto Sans Malayalam", sans-serif;
    font-optical-sizing: auto;
}

.overdue {
    background-color: #ff0026;
}

.due-today {
    background-color: #ffcdd2;
}

.due-tomorrow {
    background-color: #bbdefb;
}

.due-later {
    background-color: #c8e6c9;
}

.task-container {
    cursor: pointer;
}

.delete-icon,
.complete-icon {
    cursor: pointer;
}

.hidden {
    display: none;
}

.task-completed {
    background-color: #d1d5db;
    text-decoration: line-through;
}

.task-list-gap {
    gap: 10px;
}

.task-list-item {
    width: calc(100% - 20px);
}

File: .\js\scripts.js
------------------------------------------------------------
document.addEventListener('DOMContentLoaded', function() {
    const tasks = [
        { name: 'YT Intro remix', date: '2024-07-15', completed: true },
        { name: 'Do the homework', date: '2024-07-16', completed: true },
        { name: 'Magic stuff', date: '2024-07-17', completed: false },
        { name: 'Magic stuff 2.0', date: '2024-07-18', completed: false }
    ];

    const taskContainer = document.getElementById('tasks');
    const addTaskButton = document.getElementById('addTaskButton');
    const taskModal = document.getElementById('taskModal');
    const cancelButton = document.getElementById('cancelButton');
    const taskForm = document.getElementById('taskForm');

    addTaskButton.addEventListener('click', () => {
        taskModal.classList.remove('hidden');
    });

    cancelButton.addEventListener('click', () => {
        taskModal.classList.add('hidden');
    });

    taskForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const taskName = document.getElementById('taskName').value;
        const taskDate = document.getElementById('taskDate').value;

        if (taskName && taskDate) {
            tasks.push({ name: taskName, date: taskDate, completed: false });
            renderTasks();
            taskForm.reset();
            taskModal.classList.add('hidden');
        }
    });

    function renderTasks() {
        taskContainer.innerHTML = '';
        tasks.sort((a, b) => new Date(a.date) - new Date(b.date)).forEach(task => {
            const taskElement = document.createElement('div');
            const currentDate = new Date();
            const taskDate = new Date(task.date);
            let daysLeft = Math.ceil((taskDate - currentDate) / (1000 * 60 * 60 * 24));
            let dueClass = '';

            if (daysLeft < 0) {
                dueClass = 'overdue';
                daysLeft = 'Overdue';
            } else if (daysLeft === 0) {
                dueClass = 'due-today';
                daysLeft = 'Due today';
            } else if (daysLeft === 1) {
                dueClass = 'due-tomorrow';
                daysLeft = 'Due tomorrow';
            } else {
                dueClass = 'due-later';
                daysLeft = `Due in ${daysLeft} days`;
            }

            taskElement.className = `flex justify-between items-center border-b border-slate-200 py-3 px-2 border-l-4 ${dueClass}`;
            taskElement.innerHTML = `
                <div class="inline-flex items-center space-x-2">
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-slate-500 hover:text-indigo-600 hover:cursor-pointer">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div class="${task.completed ? 'line-through text-slate-500' : ''}">${task.name}</div>
                </div>
                <div class="flex space-x-4 items-center">
                    <span class="text-xs ${dueClass}">${daysLeft}</span>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-slate-500 hover:text-slate-700 hover:cursor-pointer delete-icon">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                    </svg>
                </div>
            `;

            const checkbox = taskElement.querySelector('svg:first-child');
            checkbox.addEventListener('click', () => {
                task.completed = !task.completed;
                renderTasks();
            });

            const deleteIcon = taskElement.querySelector('.delete-icon');
            deleteIcon.addEventListener('click', () => {
                tasks.splice(tasks.indexOf(task), 1);
                renderTasks();
            });

            taskContainer.appendChild(taskElement);
        });
    }

    renderTasks();
});

